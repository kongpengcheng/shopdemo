package com.kong;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Shop".
*/
public class Green_Wine_ShopDao extends AbstractDao<Green_Wine_Shop, Long> {

    public static final String TABLENAME = "Shop";

    /**
     * Properties of entity Green_Wine_Shop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Wine_name = new Property(1, String.class, "wine_name", false, "WINE_NAME");
        public final static Property Wine_money = new Property(2, String.class, "wine_money", false, "WINE_MONEY");
        public final static Property Wine_num = new Property(3, String.class, "wine_num", false, "WINE_NUM");
        public final static Property IsCheck = new Property(4, Boolean.class, "isCheck", false, "IS_CHECK");
    };


    public Green_Wine_ShopDao(DaoConfig config) {
        super(config);
    }
    
    public Green_Wine_ShopDao(DaoConfig config, Green_DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Shop\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WINE_NAME\" TEXT," + // 1: wine_name
                "\"WINE_MONEY\" TEXT," + // 2: wine_money
                "\"WINE_NUM\" TEXT," + // 3: wine_num
                "\"IS_CHECK\" INTEGER);"); // 4: isCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Shop\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Green_Wine_Shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String wine_name = entity.getWine_name();
        if (wine_name != null) {
            stmt.bindString(2, wine_name);
        }
 
        String wine_money = entity.getWine_money();
        if (wine_money != null) {
            stmt.bindString(3, wine_money);
        }
 
        String wine_num = entity.getWine_num();
        if (wine_num != null) {
            stmt.bindString(4, wine_num);
        }
 
        Boolean isCheck = entity.getIsCheck();
        if (isCheck != null) {
            stmt.bindLong(5, isCheck ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Green_Wine_Shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String wine_name = entity.getWine_name();
        if (wine_name != null) {
            stmt.bindString(2, wine_name);
        }
 
        String wine_money = entity.getWine_money();
        if (wine_money != null) {
            stmt.bindString(3, wine_money);
        }
 
        String wine_num = entity.getWine_num();
        if (wine_num != null) {
            stmt.bindString(4, wine_num);
        }
 
        Boolean isCheck = entity.getIsCheck();
        if (isCheck != null) {
            stmt.bindLong(5, isCheck ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Green_Wine_Shop readEntity(Cursor cursor, int offset) {
        Green_Wine_Shop entity = new Green_Wine_Shop( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // wine_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wine_money
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // wine_num
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // isCheck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Green_Wine_Shop entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWine_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWine_money(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWine_num(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsCheck(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Green_Wine_Shop entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Green_Wine_Shop entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
